{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "U2,S2,M2",
      "provenance": [],
      "collapsed_sections": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.3"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/cassidyhanna/DS-Unit-2-Kaggle-Challenge/blob/master/U2%2CS2%2CM2.ipynb/module2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "30PAW4n2tU3w",
        "colab_type": "text"
      },
      "source": [
        "Lambda School Data Science\n",
        "\n",
        "*Unit 2, Sprint 2, Module 2*\n",
        "\n",
        "---"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "colab_type": "text",
        "id": "7IXUfiQ2UKj6"
      },
      "source": [
        "# Random Forests\n",
        "\n",
        "## Assignment\n",
        "- [ ] Read [“Adopting a Hypothesis-Driven Workflow”](https://outline.com/5S5tsB), a blog post by a Lambda DS student about the Tanzania Waterpumps challenge.\n",
        "- [ ] Continue to participate in our Kaggle challenge.\n",
        "- [ ] Define a function to wrangle train, validate, and test sets in the same way. Clean outliers and engineer features.\n",
        "- [ ] Try Ordinal Encoding.\n",
        "- [ ] Try a Random Forest Classifier.\n",
        "- [ ] Submit your predictions to our Kaggle competition. (Go to our Kaggle InClass competition webpage. Use the blue **Submit Predictions** button to upload your CSV file. Or you can use the Kaggle API to submit your predictions.)\n",
        "- [ ] Commit your notebook to your fork of the GitHub repo.\n",
        "\n",
        "## Stretch Goals\n",
        "\n",
        "### Doing\n",
        "- [ ] Add your own stretch goal(s) !\n",
        "- [ ] Do more exploratory data analysis, data cleaning, feature engineering, and feature selection.\n",
        "- [ ] Try other [categorical encodings](https://contrib.scikit-learn.org/categorical-encoding/).\n",
        "- [ ] Get and plot your feature importances.\n",
        "- [ ] Make visualizations and share on Slack.\n",
        "\n",
        "### Reading\n",
        "\n",
        "Top recommendations in _**bold italic:**_\n",
        "\n",
        "#### Decision Trees\n",
        "- A Visual Introduction to Machine Learning, [Part 1: A Decision Tree](http://www.r2d3.us/visual-intro-to-machine-learning-part-1/),  and _**[Part 2: Bias and Variance](http://www.r2d3.us/visual-intro-to-machine-learning-part-2/)**_\n",
        "- [Decision Trees: Advantages & Disadvantages](https://christophm.github.io/interpretable-ml-book/tree.html#advantages-2)\n",
        "- [How a Russian mathematician constructed a decision tree — by hand — to solve a medical problem](http://fastml.com/how-a-russian-mathematician-constructed-a-decision-tree-by-hand-to-solve-a-medical-problem/)\n",
        "- [How decision trees work](https://brohrer.github.io/how_decision_trees_work.html)\n",
        "- [Let’s Write a Decision Tree Classifier from Scratch](https://www.youtube.com/watch?v=LDRbO9a6XPU)\n",
        "\n",
        "#### Random Forests\n",
        "- [_An Introduction to Statistical Learning_](http://www-bcf.usc.edu/~gareth/ISL/), Chapter 8: Tree-Based Methods\n",
        "- [Coloring with Random Forests](http://structuringtheunstructured.blogspot.com/2017/11/coloring-with-random-forests.html)\n",
        "- _**[Random Forests for Complete Beginners: The definitive guide to Random Forests and Decision Trees](https://victorzhou.com/blog/intro-to-random-forests/)**_\n",
        "\n",
        "#### Categorical encoding for trees\n",
        "- [Are categorical variables getting lost in your random forests?](https://roamanalytics.com/2016/10/28/are-categorical-variables-getting-lost-in-your-random-forests/)\n",
        "- [Beyond One-Hot: An Exploration of Categorical Variables](http://www.willmcginnis.com/2015/11/29/beyond-one-hot-an-exploration-of-categorical-variables/)\n",
        "- _**[Categorical Features and Encoding in Decision Trees](https://medium.com/data-design/visiting-categorical-features-and-encoding-in-decision-trees-53400fa65931)**_\n",
        "- _**[Coursera — How to Win a Data Science Competition: Learn from Top Kagglers — Concept of mean encoding](https://www.coursera.org/lecture/competitive-data-science/concept-of-mean-encoding-b5Gxv)**_\n",
        "- [Mean (likelihood) encodings: a comprehensive study](https://www.kaggle.com/vprokopev/mean-likelihood-encodings-a-comprehensive-study)\n",
        "- [The Mechanics of Machine Learning, Chapter 6: Categorically Speaking](https://mlbook.explained.ai/catvars.html)\n",
        "\n",
        "#### Imposter Syndrome\n",
        "- [Effort Shock and Reward Shock (How The Karate Kid Ruined The Modern World)](http://www.tempobook.com/2014/07/09/effort-shock-and-reward-shock/)\n",
        "- [How to manage impostor syndrome in data science](https://towardsdatascience.com/how-to-manage-impostor-syndrome-in-data-science-ad814809f068)\n",
        "- [\"I am not a real data scientist\"](https://brohrer.github.io/imposter_syndrome.html)\n",
        "- _**[Imposter Syndrome in Data Science](https://caitlinhudon.com/2018/01/19/imposter-syndrome-in-data-science/)**_\n",
        "\n",
        "\n",
        "### More Categorical Encodings\n",
        "\n",
        "**1.** The article **[Categorical Features and Encoding in Decision Trees](https://medium.com/data-design/visiting-categorical-features-and-encoding-in-decision-trees-53400fa65931)** mentions 4 encodings:\n",
        "\n",
        "- **\"Categorical Encoding\":** This means using the raw categorical values as-is, not encoded. Scikit-learn doesn't support this, but some tree algorithm implementations do. For example, [Catboost](https://catboost.ai/), or R's [rpart](https://cran.r-project.org/web/packages/rpart/index.html) package.\n",
        "- **Numeric Encoding:** Synonymous with Label Encoding, or \"Ordinal\" Encoding with random order. We can use [category_encoders.OrdinalEncoder](https://contrib.scikit-learn.org/categorical-encoding/ordinal.html).\n",
        "- **One-Hot Encoding:** We can use [category_encoders.OneHotEncoder](http://contrib.scikit-learn.org/categorical-encoding/onehot.html).\n",
        "- **Binary Encoding:** We can use [category_encoders.BinaryEncoder](http://contrib.scikit-learn.org/categorical-encoding/binary.html).\n",
        "\n",
        "\n",
        "**2.** The short video \n",
        "**[Coursera — How to Win a Data Science Competition: Learn from Top Kagglers — Concept of mean encoding](https://www.coursera.org/lecture/competitive-data-science/concept-of-mean-encoding-b5Gxv)** introduces an interesting idea: use both X _and_ y to encode categoricals.\n",
        "\n",
        "Category Encoders has multiple implementations of this general concept:\n",
        "\n",
        "- [CatBoost Encoder](http://contrib.scikit-learn.org/categorical-encoding/catboost.html)\n",
        "- [James-Stein Encoder](http://contrib.scikit-learn.org/categorical-encoding/jamesstein.html)\n",
        "- [Leave One Out](http://contrib.scikit-learn.org/categorical-encoding/leaveoneout.html)\n",
        "- [M-estimate](http://contrib.scikit-learn.org/categorical-encoding/mestimate.html)\n",
        "- [Target Encoder](http://contrib.scikit-learn.org/categorical-encoding/targetencoder.html)\n",
        "- [Weight of Evidence](http://contrib.scikit-learn.org/categorical-encoding/woe.html)\n",
        "\n",
        "Category Encoder's mean encoding implementations work for regression problems or binary classification problems. \n",
        "\n",
        "For multi-class classification problems, you will need to temporarily reformulate it as binary classification. For example:\n",
        "\n",
        "```python\n",
        "encoder = ce.TargetEncoder(min_samples_leaf=..., smoothing=...) # Both parameters > 1 to avoid overfitting\n",
        "X_train_encoded = encoder.fit_transform(X_train, y_train=='functional')\n",
        "X_val_encoded = encoder.transform(X_train, y_val=='functional')\n",
        "```\n",
        "\n",
        "For this reason, mean encoding won't work well within pipelines for multi-class classification problems.\n",
        "\n",
        "**3.** The **[dirty_cat](https://dirty-cat.github.io/stable/)** library has a Target Encoder implementation that works with multi-class classification.\n",
        "\n",
        "```python\n",
        " dirty_cat.TargetEncoder(clf_type='multiclass-clf')\n",
        "```\n",
        "It also implements an interesting idea called [\"Similarity Encoder\" for dirty categories](https://www.slideshare.net/GaelVaroquaux/machine-learning-on-non-curated-data-154905090).\n",
        "\n",
        "However, it seems like dirty_cat doesn't handle missing values or unknown categories as well as category_encoders does. And you may need to use it with one column at a time, instead of with your whole dataframe.\n",
        "\n",
        "**4. [Embeddings](https://www.kaggle.com/learn/embeddings)** can work well with sparse / high cardinality categoricals.\n",
        "\n",
        "_**I hope it’s not too frustrating or confusing that there’s not one “canonical” way to encode categoricals. It’s an active area of research and experimentation! Maybe you can make your own contributions!**_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fUDHBHs1tU30",
        "colab_type": "text"
      },
      "source": [
        "### Setup\n",
        "\n",
        "You can work locally (follow the [local setup instructions](https://lambdaschool.github.io/ds/unit2/local/)) or on Colab (run the code cell below)."
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "o9eSnDYhUGD7",
        "colab": {}
      },
      "source": [
        "%%capture\n",
        "import sys\n",
        "\n",
        "# If you're on Colab:\n",
        "if 'google.colab' in sys.modules:\n",
        "    DATA_PATH = 'https://raw.githubusercontent.com/LambdaSchool/DS-Unit-2-Kaggle-Challenge/master/data/'\n",
        "    !pip install category_encoders==2.*\n",
        "\n",
        "# If you're working locally:\n",
        "else:\n",
        "    DATA_PATH = '../data/'"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab_type": "code",
        "id": "QJBD4ruICm1m",
        "outputId": "bed2bb33-f8e6-4421-828f-3aab056bfb97",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "import pandas as pd\n",
        "import numpy as np \n",
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train = pd.merge(pd.read_csv(DATA_PATH+'waterpumps/train_features.csv'), \n",
        "                 pd.read_csv(DATA_PATH+'waterpumps/train_labels.csv'))\n",
        "test = pd.read_csv(DATA_PATH+'waterpumps/test_features.csv')\n",
        "sample_submission = pd.read_csv(DATA_PATH+'waterpumps/sample_submission.csv')\n",
        "\n",
        "train, val = train_test_split(train, train_size = 0.80, test_size = 0.20, \n",
        "                              stratify = train['status_group'], random_state = 42)\n",
        "\n",
        "train.shape, test.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((47520, 41), (14358, 40))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RdHMkMhqtU4A",
        "colab_type": "code",
        "outputId": "bcd1dbde-d0ed-4d58-ed1f-baf49985c17a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Create Wrangle function\n",
        "\n",
        "def wrangle(X):\n",
        " \n",
        "  X = X.copy()\n",
        "  \n",
        "  # latitude values that are as small as zero, treat like zero\n",
        "  X['latitude'] = X['latitude'].replace(-2e-08, 0)\n",
        "\n",
        "  #when columns have zeros that aren't supposed to treat the zeros\n",
        "  #like missing values and impute them later.\n",
        "  cols_with_zeros = ['longitude', 'latitude','construction_year','gps_height', 'population']\n",
        "\n",
        "  for col in cols_with_zeros:\n",
        "    X[col] = X[col].replace(0, np.nan)\n",
        "    X[col + '_Missing'] = X[col].isnull()\n",
        "\n",
        "  #drop duplicate columns\n",
        "  duplicate = ['quantity_group', 'payment_type']\n",
        "  X = X.drop(columns = duplicate)\n",
        "\n",
        "  # drop insignificant columns\n",
        "  insignificant = ['id', 'recorded_by']\n",
        "  X = X.drop(columns = insignificant)\n",
        "\n",
        "  # date recorded to datetime\n",
        "\n",
        "  X['date_recorded'] = pd.datetime(X['date_recorded'], infer_datetime_format = True)\n",
        "\n",
        "  # create year, month and day columns and drop original column\n",
        "\n",
        "  X['year_recorded'] = X['date_recorded'].dt.year\n",
        "  X['month_recorded'] = X['date_recorded'].dt.month\n",
        "  X['day_recorded'] = X['date_recorded'].dt.day\n",
        "  X = X.drop(columns = 'date_recorded')\n",
        "\n",
        "  # Engineer feature: how many years from construction_year to date_recorded\n",
        "\n",
        "  X['years'] = X['year_recorded'] - X['construction_year']\n",
        "  X['years_Missing'] = X['years'].isnull()\n",
        "\n",
        "  return X\n",
        "\n",
        "  train = wrangle(train)\n",
        "  val = wrangle(val)\n",
        "  test = wrangle(test)\n",
        "\n",
        "train.shape, val.shape, test.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((47520, 41), (11880, 41), (14358, 40))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "pqe-rpLyb4kO",
        "colab_type": "code",
        "colab": {}
      },
      "source": [
        "target = 'status_group'\n",
        "\n",
        "train_features = train.drop(columns = target)\n",
        "\n",
        "#numeric features\n",
        "numeric = train_features.select_dtypes(include= 'number').columns.tolist()\n",
        "\n",
        "#cardinality \n",
        "cardinality = train_features.select_dtypes(exclude='number').nunique()\n",
        "\n",
        "#categorical features\n",
        "categorical = cardinality[cardinality <= 15].index.tolist()\n",
        "\n",
        "#final features\n",
        "features = categorical + numeric\n"
      ],
      "execution_count": 0,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "hlHWwIuFiBWq",
        "colab_type": "code",
        "outputId": "ef677459-e175-4075-b4ad-5beb64631508",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        }
      },
      "source": [
        "# Creating X_train, X_val ect..\n",
        "\n",
        "X_train = train[features]\n",
        "y_train = train[target]\n",
        "X_val = val[features]\n",
        "y_val = val[target]\n",
        "X_test = test[features]\n",
        "\n",
        "X_train.shape, X_val.shape, X_test.shape"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "((47520, 30), (11880, 30), (14358, 30))"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "GaUSlygErTC1",
        "colab_type": "code",
        "outputId": "79d31009-0eb4-497e-ba3f-846df69853eb",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 68
        }
      },
      "source": [
        "%%time\n",
        "import category_encoders as ce\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.pipeline import make_pipeline\n",
        "\n",
        "\n",
        "pipeline = make_pipeline(\n",
        "    ce.OrdinalEncoder(),\n",
        "    SimpleImputer(strategy = 'mean'),\n",
        "    RandomForestClassifier(n_jobs = -1, random_state = 42),\n",
        ")\n",
        "\n",
        "#Fit \n",
        "pipeline.fit(X_train,y_train)\n",
        "print('Validation Accuracy:', pipeline.score(X_val, y_val))"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Validation Accuracy: 0.8055555555555556\n",
            "CPU times: user 13.9 s, sys: 194 ms, total: 14.1 s\n",
            "Wall time: 7.61 s\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6KZIDGE1uQcW",
        "colab_type": "code",
        "outputId": "33448290-bd5b-4b56-c8de-f0b95d0a446d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 51
        }
      },
      "source": [
        "print('X_train shape before encoding', X_train.shape )\n",
        "\n",
        "encoder = pipeline.named_steps['ordinalencoder']\n",
        "encoded_df = encoder.transform(X_train)\n",
        "\n",
        "print('X_train shape after encoding', encoded_df.shape )"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "X_train shape before encoding (47520, 30)\n",
            "X_train shape after encoding (47520, 30)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "wz8_pjhQvs_u",
        "colab_type": "code",
        "outputId": "d488d1c7-3718-4a89-b9f8-59835d6cc64a",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 607
        }
      },
      "source": [
        "# get feature importance\n",
        "\n",
        "%matplotlib inline \n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "rf = pipeline.named_steps['randomforestclassifier']\n",
        "importance = pd.Series(rf.feature_importances_, encoded_df.columns)\n",
        "\n",
        "n = 20 \n",
        "plt.figure(figsize= (10, n/2))\n",
        "plt.title(f'Top {n} features')\n",
        "importance.sort_values()[-n:].plot.barh(color = 'blue');"
      ],
      "execution_count": 0,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": []
          }
        }
      ]
    }
  ]
}